makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
mvec <- makeVector()
m
x
mvec$m
mvec$x
mvec$y
mvec$get()
mvec$get
mvec$setmean
mvec$setmean()
mvec$setmean(mean)
mvec$getmean()
mvec$getmean
cvec <- cachemean()
cvec <- cachemean(c(1,2,3))
mvec <- makeVector(c(1,2,3))
cvec <- cachemean(c(1,2,3))
mvec$x
mvec$getmean()
mvec
mvec$x
mvec$set(c(1,2,3))
mvec$x
mvec$get
mvec$get()
mvec$set$x
mvec$x
makeVector()
mvec$setmean(2)
mvec$getmean()
cvec <-cachemean(mvec)
cvec$m
cvec$data
cachemean(m)
mvec$m
cachemean(mvec$m)
mvec1 <-makeVector()
mvec1$set(2,3,1)
mvec1$set(c(2,3,1)
mvec1$set(c(2,3,1))
mvec$setmean(3)
mvec$getmean()
cachemean(mvec1)
cachemean(mvec1)
cachemean(mvec)
cachemean(mvec3)
cachemean(makeVector$set(c(2,3,1)))
cachemean(makeVector$set(c(2,3,1)))
args(solve)
solve
?solve
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
m_mat <- makeCacheMatrix()
m_mat
m_mat$set(matrix(c(4,3,3,2),2,2))
m_mat$get()
m_inverse<-cacheSolve(m_mat)
m_inverse$m
m_inverse
m_mat$set(matrix(c(4,3,3,2),2,2))
mcacheSolve(m_mat)
cacheSolve(m_mat)
m_mat1 <- makeCacheMatrix()
m_mat1$set(matrix(c(4,3,3,2),2,2))
m_mat1$get()
cacheSolve(m_mat1)
cacheSolve(m_mat)
cacheSolve(m_mat1)
cacheSolve(m_mat)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <- y
m <- NULL
}
get <- function() x
setmean <- function(mean) m <- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
mvec2<-makeVector()
mvec2$set(c(1,2,3))
mvec2$m
mvec2$x
mvec2$setmean(2)
mvec2$m
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
mvec2<-makeVector()
mvec2$set(c(1,2,3))
mvec2$x
mvec2$setmean(2)
mvec2$m
mvec2$getmean()
mvec2$get()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <- y
m <- NULL
}
get <- function() x
setmean <- function(mean) m <- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
mvec2$set(c(1,2,3))
mvec2$get()
mvec2$set(c(1,2,6))
mvec2$get()
cachemean(mvec2)
mvec2$getmean()
mvec2$setmean(5)
cachemean(mvec2)
mvec2$getmean()
makeVector()
x
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector()
x
m
makeVector$m
mvec4<-makeVector$m
mvec4<-makeVector()
mvec4$m
## Creating a pair of functions to cache the inverse of matix in order to avoid furture ##computations when required. This is an assignment as a part of 'R-programming course'
#setting a matrix using set function
#calling a matrix that has been created using 'get'
#storing the inverse of the matrix using 'setinverse'
#calling the inverse that has been created 'getinverse'
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
